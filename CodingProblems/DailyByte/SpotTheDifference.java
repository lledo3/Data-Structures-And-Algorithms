/*
You are given two strings, s and t which only consist of lowercase letters. t is generated by shuffling 
the letters in s as well as potentially adding an additional random character. 
Return the letter that was randomly added to t if it exists, otherwise, return ’ ‘.
Note: You may assume that at most one additional character can be added to t.

Ex: Given the following strings...

s = "foobar", t = "barfoot", return 't'
s = "ide", t = "idea", return 'a'
s = "coding", t "ingcod", return ''
*/
public char findTheDifference(String s, String t) {
    HashMap<Character, Integer> map = new HashMap<Character, Integer>();
    for(char c: s.toCharArray()) {
        map.put(c, map.getOrDefault(c, 0) + 1);
    }

    for(char c: t.toCharArray()) {
        if(!map.containsKey(c) || map.get(c) == 0) {
            return c;
        } else {
            map.put(c, map.get(c) - 1);
        }
    }

    return ' ';
}
/*
Big-O Analysis
Runtime: O(N) where N is the total number of characters between s and t.
Space complexity: O(N) where N is the total number of characters in s.
*/